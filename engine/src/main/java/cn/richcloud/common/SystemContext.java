//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : SystemContext.java
//  @ Date : 2012/10/16
//  @ Author : 
//
//

package cn.richcloud.common;

import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentMap;

import cn.richcloud.common.datasource.ConnectionPool;
import org.apache.commons.digester.RuleSet;

public class SystemContext {
	private static ThreadLocal<SystemContext> threadContext = new ThreadLocal<SystemContext>();
	private ConcurrentMap<String, ConnectionPool> poolCache = new ConcurrentHashMap<String, ConnectionPool>();
	private ConcurrentMap<Integer, ConnectionPool> connMap = new ConcurrentHashMap<Integer, ConnectionPool>();

	public final static String ARGS = "args";
	public final static String RULE_CONTEXT = "ruleContext"; // 规则上下文

	private RuleSet ruleSet;
	private Map contextData = new HashMap();

	private SystemContext() {
	}

	/**
	 * 根据数据源名称获取链接
	 * 
	 * @param source
	 * @return
	 */
	public synchronized Connection getConnection(String source) {
		ConnectionPool pool = poolCache.get(source);
		if (pool == null) {
			pool = new ConnectionPool(source);
			poolCache.put(source, pool);
		}
		Connection conn = pool.getConnection();
		try {
			conn.setAutoCommit(false);
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			throw new RuntimeException(e.getMessage(),e);
		}
		connMap.put(conn.hashCode(), pool);
		return conn;
	}

	/**
	 * 归还使用完的连接到连接池
	 * 
	 * @param connection
	 */
	public void freeConnection(Connection connection) {
		ConnectionPool pool = this.connMap.get(connection.hashCode());
		pool.replace(connection);
	}

	/**
	 * 释放所有连接池的连接
	 */
	public void releaseAll() {
		for (ConnectionPool pool : poolCache.values()) {
			pool.clear();
		}
	}
	public void rollBakcAll() {
		for (ConnectionPool pool : poolCache.values()) {
			pool.rollback();
		}
	}

	public static void setContext(SystemContext context) {
		threadContext.set(context);
	}

	public Map getContextData() {
		return contextData;
	}

	public void setContextData(Map contextData) {
		this.contextData = contextData;
	}

	public static SystemContext getContext() {
		SystemContext context = threadContext.get();
		if (context == null) {
			context = new SystemContext();
			threadContext.set(context);
		}
		return context;
	}

	public void put(String key, Object value) {
		if (key != null) {
			this.contextData.put(key, value);
		}
	}

	public Object get(String key) {
		return this.contextData.get(key);
	}

	public void remove(String key) {
		this.contextData.remove(key);
	}
	/*
	public void setExpressionMap(Map map) {
		this.expressionMap = map;
	}

	public Map getExpressionMap() {
		return this.expressionMap;
	}

	public RuleExpress getExpression(String exp_source) {
		String etlArg = getETLArg(KeyValue.ENGINE_TYPE);
		Map<String, RuleExpress> map = this.expressionMap.get(etlArg);
		if (EmptyCheckUtil.isEmpty(map)) {
			return null;
		}
		return map.get(exp_source);
	}

	public RuleExpress getExpression(String exp_source, String engine_type) {
		Map<String, RuleExpress> map = this.expressionMap.get(engine_type);
		if (EmptyCheckUtil.isEmpty(map)) {
			return null;
		}
		return map.get(exp_source);
	}*/

	public String getETLArg(String arg_name) {
		Map map = (Map) this.contextData.get(ARGS);
		if (map == null) {
			return "";
		}
		return (String) map.get(arg_name);
	}

	/**
	 * @return the ruleSet
	 */
	public RuleSet getRuleSet() {
		return ruleSet;
	}

	/**
	 * @param ruleSet
	 *            the ruleSet to set
	 */
	public void setRuleSet(RuleSet ruleSet) {
		this.ruleSet = ruleSet;
	}

	/*public Rule getRule(String rule_id) {
		if (EmptyCheckUtil.isEmpty(rule_id) || ruleSet == null) {
			return null;
		}
		for (Rule rule : ruleSet.getRuleList()) {
			if (rule_id.equals(rule.getRule_id())) {
				return rule;
			}
		}
		return null;
	}*/
}
